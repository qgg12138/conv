2022-05-29 10:22:53,479 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.3 (default, Mar  9 2022, 03:38:16) [GCC 8.3.0]
CUDA available: True
GPU 0: NVIDIA GeForce GTX 1050
CUDA_HOME: None
GCC: gcc (Uos 8.3.0.3-3+rebuild) 8.3.0
PyTorch: 1.8.2+cu102
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.2+cu102
OpenCV: 4.5.5
MMCV: 1.3.17
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+b8c2d6a
------------------------------------------------------------

2022-05-29 10:22:54,186 - mmdet - INFO - Distributed training: False
2022-05-29 10:22:54,825 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/home/kuzuki/Downloads/coco/'
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),
    dict(
        type='Normalize',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='CocoDataset',
        ann_file=
        '/home/kuzuki/Downloads/coco/annotations/instances_train2017.json',
        img_prefix='/home/kuzuki/Downloads/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file=
        '/home/kuzuki/Downloads/coco/annotations/instances_val2017.json',
        img_prefix='/home/kuzuki/Downloads/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file=
        '/home/kuzuki/Downloads/coco/annotations/instances_val2017.json',
        img_prefix='/home/kuzuki/Downloads/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(
    type='SGD',
    lr=0.12,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        norm_decay_mult=0.0,
        custom_keys=dict(backbone=dict(lr_mult=0.3333333333333333))))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=0.00066667,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
model = dict(
    type='YOLOF',
    pretrained='convnext_tiny_1k_224_ema.pth',
    backbone=dict(
        init_cfg=dict(type='Pretrained', checkpoint='new.pth'),
        type='ConvNeXt',
        depths=[3, 3, 9, 3],
        dims=[96, 192, 384, 768],
        num_classes=80),
    neck=dict(
        type='DilatedEncoder',
        in_channels=768,
        out_channels=512,
        block_mid_channels=128,
        num_residual_blocks=4),
    bbox_head=dict(
        type='YOLOFHead',
        num_classes=80,
        in_channels=512,
        reg_decoded_bbox=True,
        anchor_generator=dict(
            type='AnchorGenerator',
            ratios=[1.0],
            scales=[1, 2, 4, 8, 16],
            strides=[32]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0],
            add_ctr_clamp=True,
            ctr_clamp=32),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='UniformAssigner', pos_ignore_thr=0.15, neg_ignore_thr=0.7),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.6),
        max_per_img=100))
custom_imports = dict(
    imports=['mmdet.models.backbones.convnext'], allow_failed_imports=False)
fp16 = dict(loss_scale='dynamic')
work_dir = './work_dirs/convbackboom'
gpu_ids = range(0, 1)

2022-05-29 10:22:57,877 - mmdet - INFO - initialize ConvNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'new.pth'}
Name of parameter - Initialization information

backbone.downsample_layers.0.0.weight - torch.Size([96, 3, 4, 4]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.0.0.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.0.1.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.0.1.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.0.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.0.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.1.weight - torch.Size([192, 96, 2, 2]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.1.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.0.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.0.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.1.weight - torch.Size([384, 192, 2, 2]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.0.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.0.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.1.weight - torch.Size([768, 384, 2, 2]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.gamma - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.dwconv.weight - torch.Size([96, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.dwconv.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.norm.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.norm.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv1.weight - torch.Size([384, 96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv2.weight - torch.Size([96, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv2.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.gamma - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.dwconv.weight - torch.Size([96, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.dwconv.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.norm.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.norm.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv1.weight - torch.Size([384, 96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv2.weight - torch.Size([96, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv2.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.gamma - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.dwconv.weight - torch.Size([96, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.dwconv.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.norm.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.norm.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv1.weight - torch.Size([384, 96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv2.weight - torch.Size([96, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv2.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.gamma - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.dwconv.weight - torch.Size([192, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.dwconv.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.norm.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.norm.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv1.weight - torch.Size([768, 192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv2.weight - torch.Size([192, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv2.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.gamma - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.dwconv.weight - torch.Size([192, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.dwconv.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.norm.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.norm.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv1.weight - torch.Size([768, 192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv2.weight - torch.Size([192, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv2.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.gamma - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.dwconv.weight - torch.Size([192, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.dwconv.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.norm.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.norm.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv1.weight - torch.Size([768, 192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv2.weight - torch.Size([192, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv2.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.gamma - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.dwconv.weight - torch.Size([768, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.dwconv.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv1.weight - torch.Size([3072, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv1.bias - torch.Size([3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv2.weight - torch.Size([768, 3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv2.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.gamma - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.dwconv.weight - torch.Size([768, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.dwconv.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv1.weight - torch.Size([3072, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv1.bias - torch.Size([3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv2.weight - torch.Size([768, 3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv2.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.gamma - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.dwconv.weight - torch.Size([768, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.dwconv.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv1.weight - torch.Size([3072, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv1.bias - torch.Size([3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv2.weight - torch.Size([768, 3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv2.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.head.weight - torch.Size([80, 768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.head.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.lateral_conv.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.lateral_conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.lateral_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.lateral_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.fpn_conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.fpn_conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.fpn_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.fpn_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.0.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_subnet.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.1.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_subnet.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.0.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.1.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.3.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_score.weight - torch.Size([400, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_score.bias - torch.Size([400]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_pred.weight - torch.Size([20, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_pred.bias - torch.Size([20]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.object_pred.weight - torch.Size([5, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.object_pred.bias - torch.Size([5]): 
Initialized by user-defined `init_weights` in YOLOFHead  
2022-05-29 10:23:24,684 - mmdet - INFO - Start running, host: kuzuki@kuzuki-PC, work_dir: /home/kuzuki/Downloads/code/AdaMixer/work_dirs/convbackboom
2022-05-29 10:23:24,685 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-05-29 10:23:24,685 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2022-05-29 10:23:24,686 - mmdet - INFO - Checkpoints will be saved to /home/kuzuki/Downloads/code/AdaMixer/work_dirs/convbackboom by HardDiskBackend.
2022-05-29 10:25:33,962 - mmdet - INFO - Epoch [1][50/117266]	lr: 1.332e-03, eta: 42 days, 2:34:27, time: 2.585, data_time: 0.073, memory: 2375, loss_cls: 1.2354, loss_bbox: 0.8684, loss: 2.1038
2022-05-29 10:27:39,146 - mmdet - INFO - Epoch [1][100/117266]	lr: 2.665e-03, eta: 41 days, 10:33:33, time: 2.504, data_time: 0.005, memory: 2379, loss_cls: 1.5081, loss_bbox: 1.0622, loss: 2.5703
2022-05-29 10:29:45,931 - mmdet - INFO - Epoch [1][150/117266]	lr: 3.997e-03, eta: 41 days, 9:22:23, time: 2.536, data_time: 0.005, memory: 2428, loss_cls: 1.4256, loss_bbox: 1.0538, loss: 2.4794
2022-05-29 10:31:48,366 - mmdet - INFO - Epoch [1][200/117266]	lr: 5.330e-03, eta: 41 days, 0:15:34, time: 2.449, data_time: 0.003, memory: 2434, loss_cls: 198.0548, loss_bbox: 1.0383, loss: 199.0931
2022-05-29 10:33:50,057 - mmdet - INFO - Epoch [1][250/117266]	lr: 6.662e-03, eta: 40 days, 17:36:50, time: 2.434, data_time: 0.003, memory: 2435, loss_cls: 406.5766, loss_bbox: 1.1016, loss: 407.6781
2022-05-29 10:35:54,132 - mmdet - INFO - Epoch [1][300/117266]	lr: 7.995e-03, eta: 40 days, 16:16:45, time: 2.482, data_time: 0.003, memory: 2462, loss_cls: 414.9967, loss_bbox: 1.0695, loss: 416.0662
2022-05-29 10:37:56,302 - mmdet - INFO - Epoch [1][350/117266]	lr: 9.327e-03, eta: 40 days, 13:11:16, time: 2.443, data_time: 0.003, memory: 2462, loss_cls: 423.3263, loss_bbox: 1.0517, loss: 424.3780
2022-05-29 10:39:58,995 - mmdet - INFO - Epoch [1][400/117266]	lr: 1.066e-02, eta: 40 days, 11:22:22, time: 2.454, data_time: 0.004, memory: 2462, loss_cls: 473.5549, loss_bbox: 1.0345, loss: 474.5894
2022-05-29 10:42:02,895 - mmdet - INFO - Epoch [1][450/117266]	lr: 1.199e-02, eta: 40 days, 11:00:04, time: 2.478, data_time: 0.005, memory: 2462, loss_cls: 344.4402, loss_bbox: 1.0884, loss: 345.5286
2022-05-29 10:44:07,013 - mmdet - INFO - Epoch [1][500/117266]	lr: 1.332e-02, eta: 40 days, 10:52:02, time: 2.482, data_time: 0.005, memory: 2462, loss_cls: 492.5719, loss_bbox: 1.0117, loss: 493.5836
2022-05-29 10:46:11,423 - mmdet - INFO - Epoch [1][550/117266]	lr: 1.466e-02, eta: 40 days, 10:57:32, time: 2.488, data_time: 0.006, memory: 2462, loss_cls: 417.5816, loss_bbox: 1.0485, loss: 418.6301
2022-05-29 10:48:14,247 - mmdet - INFO - Epoch [1][600/117266]	lr: 1.599e-02, eta: 40 days, 9:59:49, time: 2.456, data_time: 0.005, memory: 2462, loss_cls: 423.4139, loss_bbox: 1.0346, loss: 424.4486
2022-05-29 10:50:16,499 - mmdet - INFO - Epoch [1][650/117266]	lr: 1.732e-02, eta: 40 days, 8:50:00, time: 2.445, data_time: 0.005, memory: 2462, loss_cls: 391.5176, loss_bbox: 1.0499, loss: 392.5675
2022-05-29 10:52:18,635 - mmdet - INFO - Epoch [1][700/117266]	lr: 1.865e-02, eta: 40 days, 7:46:01, time: 2.443, data_time: 0.006, memory: 2462, loss_cls: 291.2072, loss_bbox: 1.0932, loss: 292.3004
2022-05-29 10:54:23,869 - mmdet - INFO - Epoch [1][750/117266]	lr: 1.999e-02, eta: 40 days, 8:27:06, time: 2.505, data_time: 0.006, memory: 2462, loss_cls: 407.7872, loss_bbox: 1.0532, loss: 408.8403
2022-05-29 10:56:29,813 - mmdet - INFO - Epoch [1][800/117266]	lr: 2.132e-02, eta: 40 days, 9:23:35, time: 2.519, data_time: 0.006, memory: 2462, loss_cls: 396.5286, loss_bbox: 1.0478, loss: 397.5764
2022-05-29 10:58:33,034 - mmdet - INFO - Epoch [1][850/117266]	lr: 2.265e-02, eta: 40 days, 8:58:06, time: 2.464, data_time: 0.006, memory: 2462, loss_cls: 404.7686, loss_bbox: 1.0466, loss: 405.8152
2022-05-29 11:00:38,308 - mmdet - INFO - Epoch [1][900/117266]	lr: 2.398e-02, eta: 40 days, 9:28:41, time: 2.505, data_time: 0.006, memory: 2462, loss_cls: 393.5623, loss_bbox: 1.0167, loss: 394.5790
2022-05-29 11:02:43,646 - mmdet - INFO - Epoch [1][950/117266]	lr: 2.532e-02, eta: 40 days, 9:57:23, time: 2.507, data_time: 0.005, memory: 2462, loss_cls: 435.6111, loss_bbox: 1.0572, loss: 436.6683
2022-05-29 11:04:47,060 - mmdet - INFO - Exp name: convbackboom.py
2022-05-29 11:04:47,060 - mmdet - INFO - Epoch [1][1000/117266]	lr: 2.665e-02, eta: 40 days, 9:37:56, time: 2.468, data_time: 0.006, memory: 2462, loss_cls: 356.3804, loss_bbox: 1.0542, loss: 357.4346
2022-05-29 11:06:49,243 - mmdet - INFO - Epoch [1][1050/117266]	lr: 2.798e-02, eta: 40 days, 8:52:41, time: 2.444, data_time: 0.006, memory: 2462, loss_cls: 279.2039, loss_bbox: 1.0552, loss: 280.2591
2022-05-29 11:08:55,130 - mmdet - INFO - Epoch [1][1100/117266]	lr: 2.931e-02, eta: 40 days, 9:30:14, time: 2.518, data_time: 0.006, memory: 2462, loss_cls: 482.0442, loss_bbox: 1.0486, loss: 483.0928
2022-05-29 11:11:00,475 - mmdet - INFO - Epoch [1][1150/117266]	lr: 3.065e-02, eta: 40 days, 9:53:19, time: 2.507, data_time: 0.006, memory: 2462, loss_cls: 348.3255, loss_bbox: 1.0391, loss: 349.3646
2022-05-29 11:13:06,554 - mmdet - INFO - Epoch [1][1200/117266]	lr: 3.198e-02, eta: 40 days, 10:28:38, time: 2.522, data_time: 0.006, memory: 2462, loss_cls: 448.2182, loss_bbox: 1.0447, loss: 449.2629
2022-05-29 11:15:08,027 - mmdet - INFO - Epoch [1][1250/117266]	lr: 3.331e-02, eta: 40 days, 9:34:36, time: 2.429, data_time: 0.006, memory: 2462, loss_cls: 405.1159, loss_bbox: 1.0161, loss: 406.1320
2022-05-29 11:17:14,290 - mmdet - INFO - Epoch [1][1300/117266]	lr: 3.464e-02, eta: 40 days, 10:10:55, time: 2.525, data_time: 0.007, memory: 2462, loss_cls: 416.1238, loss_bbox: 1.0339, loss: 417.1577
2022-05-29 11:19:20,731 - mmdet - INFO - Epoch [1][1350/117266]	lr: 3.598e-02, eta: 40 days, 10:47:28, time: 2.529, data_time: 0.007, memory: 2462, loss_cls: 353.7816, loss_bbox: 1.0698, loss: 354.8514
2022-05-29 11:21:25,850 - mmdet - INFO - Epoch [1][1400/117266]	lr: 3.731e-02, eta: 40 days, 10:59:09, time: 2.502, data_time: 0.007, memory: 2462, loss_cls: 352.1483, loss_bbox: 1.0536, loss: 353.2019
2022-05-29 11:23:28,461 - mmdet - INFO - Epoch [1][1450/117266]	lr: 3.864e-02, eta: 40 days, 10:29:20, time: 2.452, data_time: 0.007, memory: 2462, loss_cls: 332.0989, loss_bbox: 1.0384, loss: 333.1373
2022-05-29 11:25:34,193 - mmdet - INFO - Epoch [1][1500/117266]	lr: 3.997e-02, eta: 40 days, 10:50:08, time: 2.515, data_time: 0.006, memory: 2462, loss_cls: 432.0186, loss_bbox: 1.0671, loss: 433.0858
2022-05-29 11:27:39,888 - mmdet - INFO - Epoch [1][1550/117266]	lr: 4.000e-02, eta: 40 days, 11:08:54, time: 2.514, data_time: 0.005, memory: 2462, loss_cls: 280.0257, loss_bbox: 1.0429, loss: 281.0686
2022-05-29 11:29:46,294 - mmdet - INFO - Epoch [1][1600/117266]	lr: 4.000e-02, eta: 40 days, 11:36:46, time: 2.528, data_time: 0.006, memory: 2462, loss_cls: 401.8389, loss_bbox: 1.0413, loss: 402.8802
2022-05-29 11:31:49,530 - mmdet - INFO - Epoch [1][1650/117266]	lr: 4.000e-02, eta: 40 days, 11:17:48, time: 2.465, data_time: 0.006, memory: 2462, loss_cls: 368.3804, loss_bbox: 1.0627, loss: 369.4431
2022-05-29 11:33:54,486 - mmdet - INFO - Epoch [1][1700/117266]	lr: 4.000e-02, eta: 40 days, 11:23:32, time: 2.499, data_time: 0.006, memory: 2462, loss_cls: 491.1231, loss_bbox: 1.0216, loss: 492.1447
