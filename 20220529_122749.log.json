{"env_info": "sys.platform: linux\nPython: 3.7.3 (default, Mar  9 2022, 03:38:16) [GCC 8.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce GTX 1050\nCUDA_HOME: None\nGCC: gcc (Uos 8.3.0.3-3+rebuild) 8.3.0\nPyTorch: 1.8.2+cu102\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.2+cu102\nOpenCV: 4.5.5\nMMCV: 1.3.17\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.12.0+b8c2d6a", "config": "dataset_type = 'CocoDataset'\ndata_root = '/home/kuzuki/Downloads/coco/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/kuzuki/Downloads/coco/annotations/instances_train2017.json',\n        img_prefix='/home/kuzuki/Downloads/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/kuzuki/Downloads/coco/annotations/instances_val2017.json',\n        img_prefix='/home/kuzuki/Downloads/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/home/kuzuki/Downloads/coco/annotations/instances_val2017.json',\n        img_prefix='/home/kuzuki/Downloads/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='SGD',\n    lr=0.012,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(\n        norm_decay_mult=0.0,\n        custom_keys=dict(backbone=dict(lr_mult=0.3333333333333333))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=0.00066667,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'yolof.pth'\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='YOLOF',\n    pretrained='convnext_tiny_1k_224_ema.pth',\n    backbone=dict(\n        init_cfg=dict(type='Pretrained', checkpoint='new.pth'),\n        type='ConvNeXt',\n        depths=[3, 3, 9, 3],\n        dims=[96, 192, 384, 768]),\n    neck=dict(\n        type='DilatedEncoder',\n        in_channels=768,\n        out_channels=512,\n        block_mid_channels=128,\n        num_residual_blocks=4),\n    bbox_head=dict(\n        type='YOLOFHead',\n        num_classes=80,\n        in_channels=512,\n        reg_decoded_bbox=True,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            scales=[1, 2, 4, 8, 16],\n            strides=[32]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0],\n            add_ctr_clamp=True,\n            ctr_clamp=32),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='GIoULoss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='UniformAssigner', pos_ignore_thr=0.15, neg_ignore_thr=0.7),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.6),\n        max_per_img=100))\ncustom_imports = dict(\n    imports=['mmdet.models.backbones.convnext'], allow_failed_imports=False)\nfp16 = dict(loss_scale='dynamic')\nwork_dir = './work_dirs/convbackboom'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "convbackboom.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00013, "memory": 2541, "data_time": 0.04788, "loss_cls": 1.61767, "loss_bbox": 0.72868, "loss": 2.34635, "time": 2.29366}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00027, "memory": 2541, "data_time": 0.00327, "loss_cls": 1.3298, "loss_bbox": 0.66308, "loss": 1.99287, "time": 2.28697}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0004, "memory": 2541, "data_time": 0.00328, "loss_cls": 1.26213, "loss_bbox": 0.69967, "loss": 1.9618, "time": 2.31037}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00053, "memory": 2541, "data_time": 0.00326, "loss_cls": 1.37663, "loss_bbox": 0.70324, "loss": 2.07987, "time": 2.3445}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00067, "memory": 2541, "data_time": 0.00329, "loss_cls": 1.19309, "loss_bbox": 0.67195, "loss": 1.86504, "time": 2.27574}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0008, "memory": 2541, "data_time": 0.00359, "loss_cls": 2.3973, "loss_bbox": 0.74683, "loss": 3.14412, "time": 2.31139}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00093, "memory": 2541, "data_time": 0.00497, "loss_cls": 2.69582, "loss_bbox": 0.81339, "loss": 3.5092, "time": 2.35891}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00107, "memory": 2541, "data_time": 0.00552, "loss_cls": 2.87375, "loss_bbox": 0.74772, "loss": 3.62147, "time": 2.33688}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0012, "memory": 2541, "data_time": 0.00671, "loss_cls": 3.30926, "loss_bbox": 0.7971, "loss": 4.10636, "time": 2.37646}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00133, "memory": 2541, "data_time": 0.00562, "loss_cls": 3.75165, "loss_bbox": 0.79844, "loss": 4.5501, "time": 2.33863}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00147, "memory": 2541, "data_time": 0.00598, "loss_cls": 2.32082, "loss_bbox": 0.79004, "loss": 3.11085, "time": 2.35992}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0016, "memory": 2541, "data_time": 0.00607, "loss_cls": 2.50829, "loss_bbox": 0.79058, "loss": 3.29887, "time": 2.34072}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00173, "memory": 2541, "data_time": 0.00606, "loss_cls": 1.50291, "loss_bbox": 0.79954, "loss": 2.30245, "time": 2.32754}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00187, "memory": 2541, "data_time": 0.00581, "loss_cls": 1.47049, "loss_bbox": 0.88429, "loss": 2.35478, "time": 2.3172}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.002, "memory": 2541, "data_time": 0.00677, "loss_cls": 1.67856, "loss_bbox": 0.75873, "loss": 2.43729, "time": 2.36228}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00213, "memory": 2541, "data_time": 0.00603, "loss_cls": 1.60004, "loss_bbox": 0.92321, "loss": 2.52325, "time": 2.35801}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00227, "memory": 2541, "data_time": 0.00605, "loss_cls": 1.82714, "loss_bbox": 0.82445, "loss": 2.65159, "time": 2.35548}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0024, "memory": 2541, "data_time": 0.00504, "loss_cls": 1.40397, "loss_bbox": 0.69396, "loss": 2.09793, "time": 2.33247}
