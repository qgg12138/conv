2022-05-29 13:04:35,497 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.3 (default, Mar  9 2022, 03:38:16) [GCC 8.3.0]
CUDA available: True
GPU 0: NVIDIA GeForce GTX 1050
CUDA_HOME: None
GCC: gcc (Uos 8.3.0.3-3+rebuild) 8.3.0
PyTorch: 1.8.2+cu102
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.2+cu102
OpenCV: 4.5.5
MMCV: 1.3.17
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+b8c2d6a
------------------------------------------------------------

2022-05-29 13:04:36,282 - mmdet - INFO - Distributed training: False
2022-05-29 13:04:37,181 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/home/kuzuki/Downloads/coco/'
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),
    dict(
        type='Normalize',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='CocoDataset',
        ann_file=
        '/home/kuzuki/Downloads/coco/annotations/instances_train2017.json',
        img_prefix='/home/kuzuki/Downloads/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file=
        '/home/kuzuki/Downloads/coco/annotations/instances_val2017.json',
        img_prefix='/home/kuzuki/Downloads/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file=
        '/home/kuzuki/Downloads/coco/annotations/instances_val2017.json',
        img_prefix='/home/kuzuki/Downloads/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(
    type='SGD',
    lr=0.12,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        norm_decay_mult=0.0, custom_keys=dict(backbone=dict(lr_mult=0.1))))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=0.00066667,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'yolof.pth'
resume_from = None
workflow = [('train', 1)]
model = dict(
    type='YOLOF',
    pretrained='convnext_tiny_1k_224_ema.pth',
    backbone=dict(
        init_cfg=dict(type='Pretrained', checkpoint='new.pth'),
        type='ConvNeXt',
        depths=[3, 3, 9, 3],
        dims=[96, 192, 384, 768]),
    neck=dict(
        type='DilatedEncoder',
        in_channels=768,
        out_channels=512,
        block_mid_channels=128,
        num_residual_blocks=4),
    bbox_head=dict(
        type='YOLOFHead',
        num_classes=80,
        in_channels=512,
        reg_decoded_bbox=True,
        anchor_generator=dict(
            type='AnchorGenerator',
            ratios=[1.0],
            scales=[1, 2, 4, 8, 16],
            strides=[32]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0],
            add_ctr_clamp=True,
            ctr_clamp=32),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='UniformAssigner', pos_ignore_thr=0.15, neg_ignore_thr=0.7),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.6),
        max_per_img=100))
custom_imports = dict(
    imports=['mmdet.models.backbones.convnext'], allow_failed_imports=False)
fp16 = dict(loss_scale='dynamic')
work_dir = './work_dirs/convbackboom'
gpu_ids = range(0, 1)

Name of parameter - Initialization information

backbone.downsample_layers.0.0.weight - torch.Size([96, 3, 4, 4]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.0.0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.0.1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.0.1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.1.0.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.1.0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.1.1.weight - torch.Size([192, 96, 2, 2]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.1.1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.2.0.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.2.0.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.2.1.weight - torch.Size([384, 192, 2, 2]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.2.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.3.0.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.3.0.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.3.1.weight - torch.Size([768, 384, 2, 2]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.downsample_layers.3.1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.0.gamma - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.0.dwconv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.0.dwconv.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.0.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.0.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.0.pwconv1.weight - torch.Size([384, 96]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.0.0.pwconv1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.0.pwconv2.weight - torch.Size([96, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.0.0.pwconv2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.1.gamma - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.1.dwconv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.1.dwconv.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.1.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.1.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.1.pwconv1.weight - torch.Size([384, 96]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.0.1.pwconv1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.1.pwconv2.weight - torch.Size([96, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.0.1.pwconv2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.2.gamma - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.2.dwconv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.2.dwconv.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.2.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.2.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.2.pwconv1.weight - torch.Size([384, 96]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.0.2.pwconv1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.0.2.pwconv2.weight - torch.Size([96, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.0.2.pwconv2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.0.gamma - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.0.dwconv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.0.dwconv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.0.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.0.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.0.pwconv1.weight - torch.Size([768, 192]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.1.0.pwconv1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.0.pwconv2.weight - torch.Size([192, 768]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.1.0.pwconv2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.1.gamma - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.1.dwconv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.1.dwconv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.1.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.1.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.1.pwconv1.weight - torch.Size([768, 192]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.1.1.pwconv1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.1.pwconv2.weight - torch.Size([192, 768]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.1.1.pwconv2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.2.gamma - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.2.dwconv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.2.dwconv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.2.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.2.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.2.pwconv1.weight - torch.Size([768, 192]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.1.2.pwconv1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.1.2.pwconv2.weight - torch.Size([192, 768]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.1.2.pwconv2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.0.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.0.dwconv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.0.dwconv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.0.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.0.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.0.pwconv1.weight - torch.Size([1536, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.0.pwconv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.0.pwconv2.weight - torch.Size([384, 1536]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.0.pwconv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.1.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.1.dwconv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.1.dwconv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.1.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.1.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.1.pwconv1.weight - torch.Size([1536, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.1.pwconv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.1.pwconv2.weight - torch.Size([384, 1536]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.1.pwconv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.2.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.2.dwconv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.2.dwconv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.2.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.2.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.2.pwconv1.weight - torch.Size([1536, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.2.pwconv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.2.pwconv2.weight - torch.Size([384, 1536]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.2.pwconv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.3.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.3.dwconv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.3.dwconv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.3.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.3.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.3.pwconv1.weight - torch.Size([1536, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.3.pwconv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.3.pwconv2.weight - torch.Size([384, 1536]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.3.pwconv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.4.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.4.dwconv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.4.dwconv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.4.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.4.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.4.pwconv1.weight - torch.Size([1536, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.4.pwconv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.4.pwconv2.weight - torch.Size([384, 1536]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.4.pwconv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.5.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.5.dwconv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.5.dwconv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.5.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.5.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.5.pwconv1.weight - torch.Size([1536, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.5.pwconv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.5.pwconv2.weight - torch.Size([384, 1536]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.5.pwconv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.6.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.6.dwconv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.6.dwconv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.6.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.6.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.6.pwconv1.weight - torch.Size([1536, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.6.pwconv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.6.pwconv2.weight - torch.Size([384, 1536]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.6.pwconv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.7.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.7.dwconv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.7.dwconv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.7.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.7.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.7.pwconv1.weight - torch.Size([1536, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.7.pwconv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.7.pwconv2.weight - torch.Size([384, 1536]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.7.pwconv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.8.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.8.dwconv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.8.dwconv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.8.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.8.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.8.pwconv1.weight - torch.Size([1536, 384]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.8.pwconv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.2.8.pwconv2.weight - torch.Size([384, 1536]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.2.8.pwconv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.0.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.0.dwconv.weight - torch.Size([768, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.0.dwconv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.0.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.0.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.0.pwconv1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.3.0.pwconv1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.0.pwconv2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.3.0.pwconv2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.1.dwconv.weight - torch.Size([768, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.1.dwconv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.1.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.1.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.1.pwconv1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.3.1.pwconv1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.1.pwconv2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.3.1.pwconv2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.2.dwconv.weight - torch.Size([768, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.2.dwconv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.2.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.2.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.2.pwconv1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.3.2.pwconv1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.stages.3.2.pwconv2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in ConvNeXt  

backbone.stages.3.2.pwconv2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm0.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm3.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm3.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.lateral_conv.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.lateral_conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.lateral_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.lateral_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.fpn_conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.fpn_conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.fpn_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.fpn_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.0.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_subnet.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.1.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_subnet.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.0.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.1.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.3.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_score.weight - torch.Size([400, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_score.bias - torch.Size([400]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_pred.weight - torch.Size([20, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_pred.bias - torch.Size([20]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.object_pred.weight - torch.Size([5, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.object_pred.bias - torch.Size([5]): 
Initialized by user-defined `init_weights` in YOLOFHead  
2022-05-29 13:05:10,269 - mmdet - INFO - load checkpoint from local path: yolof.pth
2022-05-29 13:05:10,415 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for neck.lateral_conv.weight: copying a param with shape torch.Size([512, 2048, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 768, 1, 1]).
unexpected key in source state_dict: backbone.conv1.weight, backbone.bn1.weight, backbone.bn1.bias, backbone.bn1.running_mean, backbone.bn1.running_var, backbone.bn1.num_batches_tracked, backbone.layer1.0.conv1.weight, backbone.layer1.0.bn1.weight, backbone.layer1.0.bn1.bias, backbone.layer1.0.bn1.running_mean, backbone.layer1.0.bn1.running_var, backbone.layer1.0.bn1.num_batches_tracked, backbone.layer1.0.conv2.weight, backbone.layer1.0.bn2.weight, backbone.layer1.0.bn2.bias, backbone.layer1.0.bn2.running_mean, backbone.layer1.0.bn2.running_var, backbone.layer1.0.bn2.num_batches_tracked, backbone.layer1.0.conv3.weight, backbone.layer1.0.bn3.weight, backbone.layer1.0.bn3.bias, backbone.layer1.0.bn3.running_mean, backbone.layer1.0.bn3.running_var, backbone.layer1.0.bn3.num_batches_tracked, backbone.layer1.0.downsample.0.weight, backbone.layer1.0.downsample.1.weight, backbone.layer1.0.downsample.1.bias, backbone.layer1.0.downsample.1.running_mean, backbone.layer1.0.downsample.1.running_var, backbone.layer1.0.downsample.1.num_batches_tracked, backbone.layer1.1.conv1.weight, backbone.layer1.1.bn1.weight, backbone.layer1.1.bn1.bias, backbone.layer1.1.bn1.running_mean, backbone.layer1.1.bn1.running_var, backbone.layer1.1.bn1.num_batches_tracked, backbone.layer1.1.conv2.weight, backbone.layer1.1.bn2.weight, backbone.layer1.1.bn2.bias, backbone.layer1.1.bn2.running_mean, backbone.layer1.1.bn2.running_var, backbone.layer1.1.bn2.num_batches_tracked, backbone.layer1.1.conv3.weight, backbone.layer1.1.bn3.weight, backbone.layer1.1.bn3.bias, backbone.layer1.1.bn3.running_mean, backbone.layer1.1.bn3.running_var, backbone.layer1.1.bn3.num_batches_tracked, backbone.layer1.2.conv1.weight, backbone.layer1.2.bn1.weight, backbone.layer1.2.bn1.bias, backbone.layer1.2.bn1.running_mean, backbone.layer1.2.bn1.running_var, backbone.layer1.2.bn1.num_batches_tracked, backbone.layer1.2.conv2.weight, backbone.layer1.2.bn2.weight, backbone.layer1.2.bn2.bias, backbone.layer1.2.bn2.running_mean, backbone.layer1.2.bn2.running_var, backbone.layer1.2.bn2.num_batches_tracked, backbone.layer1.2.conv3.weight, backbone.layer1.2.bn3.weight, backbone.layer1.2.bn3.bias, backbone.layer1.2.bn3.running_mean, backbone.layer1.2.bn3.running_var, backbone.layer1.2.bn3.num_batches_tracked, backbone.layer2.0.conv1.weight, backbone.layer2.0.bn1.weight, backbone.layer2.0.bn1.bias, backbone.layer2.0.bn1.running_mean, backbone.layer2.0.bn1.running_var, backbone.layer2.0.bn1.num_batches_tracked, backbone.layer2.0.conv2.weight, backbone.layer2.0.bn2.weight, backbone.layer2.0.bn2.bias, backbone.layer2.0.bn2.running_mean, backbone.layer2.0.bn2.running_var, backbone.layer2.0.bn2.num_batches_tracked, backbone.layer2.0.conv3.weight, backbone.layer2.0.bn3.weight, backbone.layer2.0.bn3.bias, backbone.layer2.0.bn3.running_mean, backbone.layer2.0.bn3.running_var, backbone.layer2.0.bn3.num_batches_tracked, backbone.layer2.0.downsample.0.weight, backbone.layer2.0.downsample.1.weight, backbone.layer2.0.downsample.1.bias, backbone.layer2.0.downsample.1.running_mean, backbone.layer2.0.downsample.1.running_var, backbone.layer2.0.downsample.1.num_batches_tracked, backbone.layer2.1.conv1.weight, backbone.layer2.1.bn1.weight, backbone.layer2.1.bn1.bias, backbone.layer2.1.bn1.running_mean, backbone.layer2.1.bn1.running_var, backbone.layer2.1.bn1.num_batches_tracked, backbone.layer2.1.conv2.weight, backbone.layer2.1.bn2.weight, backbone.layer2.1.bn2.bias, backbone.layer2.1.bn2.running_mean, backbone.layer2.1.bn2.running_var, backbone.layer2.1.bn2.num_batches_tracked, backbone.layer2.1.conv3.weight, backbone.layer2.1.bn3.weight, backbone.layer2.1.bn3.bias, backbone.layer2.1.bn3.running_mean, backbone.layer2.1.bn3.running_var, backbone.layer2.1.bn3.num_batches_tracked, backbone.layer2.2.conv1.weight, backbone.layer2.2.bn1.weight, backbone.layer2.2.bn1.bias, backbone.layer2.2.bn1.running_mean, backbone.layer2.2.bn1.running_var, backbone.layer2.2.bn1.num_batches_tracked, backbone.layer2.2.conv2.weight, backbone.layer2.2.bn2.weight, backbone.layer2.2.bn2.bias, backbone.layer2.2.bn2.running_mean, backbone.layer2.2.bn2.running_var, backbone.layer2.2.bn2.num_batches_tracked, backbone.layer2.2.conv3.weight, backbone.layer2.2.bn3.weight, backbone.layer2.2.bn3.bias, backbone.layer2.2.bn3.running_mean, backbone.layer2.2.bn3.running_var, backbone.layer2.2.bn3.num_batches_tracked, backbone.layer2.3.conv1.weight, backbone.layer2.3.bn1.weight, backbone.layer2.3.bn1.bias, backbone.layer2.3.bn1.running_mean, backbone.layer2.3.bn1.running_var, backbone.layer2.3.bn1.num_batches_tracked, backbone.layer2.3.conv2.weight, backbone.layer2.3.bn2.weight, backbone.layer2.3.bn2.bias, backbone.layer2.3.bn2.running_mean, backbone.layer2.3.bn2.running_var, backbone.layer2.3.bn2.num_batches_tracked, backbone.layer2.3.conv3.weight, backbone.layer2.3.bn3.weight, backbone.layer2.3.bn3.bias, backbone.layer2.3.bn3.running_mean, backbone.layer2.3.bn3.running_var, backbone.layer2.3.bn3.num_batches_tracked, backbone.layer3.0.conv1.weight, backbone.layer3.0.bn1.weight, backbone.layer3.0.bn1.bias, backbone.layer3.0.bn1.running_mean, backbone.layer3.0.bn1.running_var, backbone.layer3.0.bn1.num_batches_tracked, backbone.layer3.0.conv2.weight, backbone.layer3.0.bn2.weight, backbone.layer3.0.bn2.bias, backbone.layer3.0.bn2.running_mean, backbone.layer3.0.bn2.running_var, backbone.layer3.0.bn2.num_batches_tracked, backbone.layer3.0.conv3.weight, backbone.layer3.0.bn3.weight, backbone.layer3.0.bn3.bias, backbone.layer3.0.bn3.running_mean, backbone.layer3.0.bn3.running_var, backbone.layer3.0.bn3.num_batches_tracked, backbone.layer3.0.downsample.0.weight, backbone.layer3.0.downsample.1.weight, backbone.layer3.0.downsample.1.bias, backbone.layer3.0.downsample.1.running_mean, backbone.layer3.0.downsample.1.running_var, backbone.layer3.0.downsample.1.num_batches_tracked, backbone.layer3.1.conv1.weight, backbone.layer3.1.bn1.weight, backbone.layer3.1.bn1.bias, backbone.layer3.1.bn1.running_mean, backbone.layer3.1.bn1.running_var, backbone.layer3.1.bn1.num_batches_tracked, backbone.layer3.1.conv2.weight, backbone.layer3.1.bn2.weight, backbone.layer3.1.bn2.bias, backbone.layer3.1.bn2.running_mean, backbone.layer3.1.bn2.running_var, backbone.layer3.1.bn2.num_batches_tracked, backbone.layer3.1.conv3.weight, backbone.layer3.1.bn3.weight, backbone.layer3.1.bn3.bias, backbone.layer3.1.bn3.running_mean, backbone.layer3.1.bn3.running_var, backbone.layer3.1.bn3.num_batches_tracked, backbone.layer3.2.conv1.weight, backbone.layer3.2.bn1.weight, backbone.layer3.2.bn1.bias, backbone.layer3.2.bn1.running_mean, backbone.layer3.2.bn1.running_var, backbone.layer3.2.bn1.num_batches_tracked, backbone.layer3.2.conv2.weight, backbone.layer3.2.bn2.weight, backbone.layer3.2.bn2.bias, backbone.layer3.2.bn2.running_mean, backbone.layer3.2.bn2.running_var, backbone.layer3.2.bn2.num_batches_tracked, backbone.layer3.2.conv3.weight, backbone.layer3.2.bn3.weight, backbone.layer3.2.bn3.bias, backbone.layer3.2.bn3.running_mean, backbone.layer3.2.bn3.running_var, backbone.layer3.2.bn3.num_batches_tracked, backbone.layer3.3.conv1.weight, backbone.layer3.3.bn1.weight, backbone.layer3.3.bn1.bias, backbone.layer3.3.bn1.running_mean, backbone.layer3.3.bn1.running_var, backbone.layer3.3.bn1.num_batches_tracked, backbone.layer3.3.conv2.weight, backbone.layer3.3.bn2.weight, backbone.layer3.3.bn2.bias, backbone.layer3.3.bn2.running_mean, backbone.layer3.3.bn2.running_var, backbone.layer3.3.bn2.num_batches_tracked, backbone.layer3.3.conv3.weight, backbone.layer3.3.bn3.weight, backbone.layer3.3.bn3.bias, backbone.layer3.3.bn3.running_mean, backbone.layer3.3.bn3.running_var, backbone.layer3.3.bn3.num_batches_tracked, backbone.layer3.4.conv1.weight, backbone.layer3.4.bn1.weight, backbone.layer3.4.bn1.bias, backbone.layer3.4.bn1.running_mean, backbone.layer3.4.bn1.running_var, backbone.layer3.4.bn1.num_batches_tracked, backbone.layer3.4.conv2.weight, backbone.layer3.4.bn2.weight, backbone.layer3.4.bn2.bias, backbone.layer3.4.bn2.running_mean, backbone.layer3.4.bn2.running_var, backbone.layer3.4.bn2.num_batches_tracked, backbone.layer3.4.conv3.weight, backbone.layer3.4.bn3.weight, backbone.layer3.4.bn3.bias, backbone.layer3.4.bn3.running_mean, backbone.layer3.4.bn3.running_var, backbone.layer3.4.bn3.num_batches_tracked, backbone.layer3.5.conv1.weight, backbone.layer3.5.bn1.weight, backbone.layer3.5.bn1.bias, backbone.layer3.5.bn1.running_mean, backbone.layer3.5.bn1.running_var, backbone.layer3.5.bn1.num_batches_tracked, backbone.layer3.5.conv2.weight, backbone.layer3.5.bn2.weight, backbone.layer3.5.bn2.bias, backbone.layer3.5.bn2.running_mean, backbone.layer3.5.bn2.running_var, backbone.layer3.5.bn2.num_batches_tracked, backbone.layer3.5.conv3.weight, backbone.layer3.5.bn3.weight, backbone.layer3.5.bn3.bias, backbone.layer3.5.bn3.running_mean, backbone.layer3.5.bn3.running_var, backbone.layer3.5.bn3.num_batches_tracked, backbone.layer4.0.conv1.weight, backbone.layer4.0.bn1.weight, backbone.layer4.0.bn1.bias, backbone.layer4.0.bn1.running_mean, backbone.layer4.0.bn1.running_var, backbone.layer4.0.bn1.num_batches_tracked, backbone.layer4.0.conv2.weight, backbone.layer4.0.bn2.weight, backbone.layer4.0.bn2.bias, backbone.layer4.0.bn2.running_mean, backbone.layer4.0.bn2.running_var, backbone.layer4.0.bn2.num_batches_tracked, backbone.layer4.0.conv3.weight, backbone.layer4.0.bn3.weight, backbone.layer4.0.bn3.bias, backbone.layer4.0.bn3.running_mean, backbone.layer4.0.bn3.running_var, backbone.layer4.0.bn3.num_batches_tracked, backbone.layer4.0.downsample.0.weight, backbone.layer4.0.downsample.1.weight, backbone.layer4.0.downsample.1.bias, backbone.layer4.0.downsample.1.running_mean, backbone.layer4.0.downsample.1.running_var, backbone.layer4.0.downsample.1.num_batches_tracked, backbone.layer4.1.conv1.weight, backbone.layer4.1.bn1.weight, backbone.layer4.1.bn1.bias, backbone.layer4.1.bn1.running_mean, backbone.layer4.1.bn1.running_var, backbone.layer4.1.bn1.num_batches_tracked, backbone.layer4.1.conv2.weight, backbone.layer4.1.bn2.weight, backbone.layer4.1.bn2.bias, backbone.layer4.1.bn2.running_mean, backbone.layer4.1.bn2.running_var, backbone.layer4.1.bn2.num_batches_tracked, backbone.layer4.1.conv3.weight, backbone.layer4.1.bn3.weight, backbone.layer4.1.bn3.bias, backbone.layer4.1.bn3.running_mean, backbone.layer4.1.bn3.running_var, backbone.layer4.1.bn3.num_batches_tracked, backbone.layer4.2.conv1.weight, backbone.layer4.2.bn1.weight, backbone.layer4.2.bn1.bias, backbone.layer4.2.bn1.running_mean, backbone.layer4.2.bn1.running_var, backbone.layer4.2.bn1.num_batches_tracked, backbone.layer4.2.conv2.weight, backbone.layer4.2.bn2.weight, backbone.layer4.2.bn2.bias, backbone.layer4.2.bn2.running_mean, backbone.layer4.2.bn2.running_var, backbone.layer4.2.bn2.num_batches_tracked, backbone.layer4.2.conv3.weight, backbone.layer4.2.bn3.weight, backbone.layer4.2.bn3.bias, backbone.layer4.2.bn3.running_mean, backbone.layer4.2.bn3.running_var, backbone.layer4.2.bn3.num_batches_tracked

missing keys in source state_dict: backbone.downsample_layers.0.0.weight, backbone.downsample_layers.0.0.bias, backbone.downsample_layers.0.1.weight, backbone.downsample_layers.0.1.bias, backbone.downsample_layers.1.0.weight, backbone.downsample_layers.1.0.bias, backbone.downsample_layers.1.1.weight, backbone.downsample_layers.1.1.bias, backbone.downsample_layers.2.0.weight, backbone.downsample_layers.2.0.bias, backbone.downsample_layers.2.1.weight, backbone.downsample_layers.2.1.bias, backbone.downsample_layers.3.0.weight, backbone.downsample_layers.3.0.bias, backbone.downsample_layers.3.1.weight, backbone.downsample_layers.3.1.bias, backbone.stages.0.0.gamma, backbone.stages.0.0.dwconv.weight, backbone.stages.0.0.dwconv.bias, backbone.stages.0.0.norm.weight, backbone.stages.0.0.norm.bias, backbone.stages.0.0.pwconv1.weight, backbone.stages.0.0.pwconv1.bias, backbone.stages.0.0.pwconv2.weight, backbone.stages.0.0.pwconv2.bias, backbone.stages.0.1.gamma, backbone.stages.0.1.dwconv.weight, backbone.stages.0.1.dwconv.bias, backbone.stages.0.1.norm.weight, backbone.stages.0.1.norm.bias, backbone.stages.0.1.pwconv1.weight, backbone.stages.0.1.pwconv1.bias, backbone.stages.0.1.pwconv2.weight, backbone.stages.0.1.pwconv2.bias, backbone.stages.0.2.gamma, backbone.stages.0.2.dwconv.weight, backbone.stages.0.2.dwconv.bias, backbone.stages.0.2.norm.weight, backbone.stages.0.2.norm.bias, backbone.stages.0.2.pwconv1.weight, backbone.stages.0.2.pwconv1.bias, backbone.stages.0.2.pwconv2.weight, backbone.stages.0.2.pwconv2.bias, backbone.stages.1.0.gamma, backbone.stages.1.0.dwconv.weight, backbone.stages.1.0.dwconv.bias, backbone.stages.1.0.norm.weight, backbone.stages.1.0.norm.bias, backbone.stages.1.0.pwconv1.weight, backbone.stages.1.0.pwconv1.bias, backbone.stages.1.0.pwconv2.weight, backbone.stages.1.0.pwconv2.bias, backbone.stages.1.1.gamma, backbone.stages.1.1.dwconv.weight, backbone.stages.1.1.dwconv.bias, backbone.stages.1.1.norm.weight, backbone.stages.1.1.norm.bias, backbone.stages.1.1.pwconv1.weight, backbone.stages.1.1.pwconv1.bias, backbone.stages.1.1.pwconv2.weight, backbone.stages.1.1.pwconv2.bias, backbone.stages.1.2.gamma, backbone.stages.1.2.dwconv.weight, backbone.stages.1.2.dwconv.bias, backbone.stages.1.2.norm.weight, backbone.stages.1.2.norm.bias, backbone.stages.1.2.pwconv1.weight, backbone.stages.1.2.pwconv1.bias, backbone.stages.1.2.pwconv2.weight, backbone.stages.1.2.pwconv2.bias, backbone.stages.2.0.gamma, backbone.stages.2.0.dwconv.weight, backbone.stages.2.0.dwconv.bias, backbone.stages.2.0.norm.weight, backbone.stages.2.0.norm.bias, backbone.stages.2.0.pwconv1.weight, backbone.stages.2.0.pwconv1.bias, backbone.stages.2.0.pwconv2.weight, backbone.stages.2.0.pwconv2.bias, backbone.stages.2.1.gamma, backbone.stages.2.1.dwconv.weight, backbone.stages.2.1.dwconv.bias, backbone.stages.2.1.norm.weight, backbone.stages.2.1.norm.bias, backbone.stages.2.1.pwconv1.weight, backbone.stages.2.1.pwconv1.bias, backbone.stages.2.1.pwconv2.weight, backbone.stages.2.1.pwconv2.bias, backbone.stages.2.2.gamma, backbone.stages.2.2.dwconv.weight, backbone.stages.2.2.dwconv.bias, backbone.stages.2.2.norm.weight, backbone.stages.2.2.norm.bias, backbone.stages.2.2.pwconv1.weight, backbone.stages.2.2.pwconv1.bias, backbone.stages.2.2.pwconv2.weight, backbone.stages.2.2.pwconv2.bias, backbone.stages.2.3.gamma, backbone.stages.2.3.dwconv.weight, backbone.stages.2.3.dwconv.bias, backbone.stages.2.3.norm.weight, backbone.stages.2.3.norm.bias, backbone.stages.2.3.pwconv1.weight, backbone.stages.2.3.pwconv1.bias, backbone.stages.2.3.pwconv2.weight, backbone.stages.2.3.pwconv2.bias, backbone.stages.2.4.gamma, backbone.stages.2.4.dwconv.weight, backbone.stages.2.4.dwconv.bias, backbone.stages.2.4.norm.weight, backbone.stages.2.4.norm.bias, backbone.stages.2.4.pwconv1.weight, backbone.stages.2.4.pwconv1.bias, backbone.stages.2.4.pwconv2.weight, backbone.stages.2.4.pwconv2.bias, backbone.stages.2.5.gamma, backbone.stages.2.5.dwconv.weight, backbone.stages.2.5.dwconv.bias, backbone.stages.2.5.norm.weight, backbone.stages.2.5.norm.bias, backbone.stages.2.5.pwconv1.weight, backbone.stages.2.5.pwconv1.bias, backbone.stages.2.5.pwconv2.weight, backbone.stages.2.5.pwconv2.bias, backbone.stages.2.6.gamma, backbone.stages.2.6.dwconv.weight, backbone.stages.2.6.dwconv.bias, backbone.stages.2.6.norm.weight, backbone.stages.2.6.norm.bias, backbone.stages.2.6.pwconv1.weight, backbone.stages.2.6.pwconv1.bias, backbone.stages.2.6.pwconv2.weight, backbone.stages.2.6.pwconv2.bias, backbone.stages.2.7.gamma, backbone.stages.2.7.dwconv.weight, backbone.stages.2.7.dwconv.bias, backbone.stages.2.7.norm.weight, backbone.stages.2.7.norm.bias, backbone.stages.2.7.pwconv1.weight, backbone.stages.2.7.pwconv1.bias, backbone.stages.2.7.pwconv2.weight, backbone.stages.2.7.pwconv2.bias, backbone.stages.2.8.gamma, backbone.stages.2.8.dwconv.weight, backbone.stages.2.8.dwconv.bias, backbone.stages.2.8.norm.weight, backbone.stages.2.8.norm.bias, backbone.stages.2.8.pwconv1.weight, backbone.stages.2.8.pwconv1.bias, backbone.stages.2.8.pwconv2.weight, backbone.stages.2.8.pwconv2.bias, backbone.stages.3.0.gamma, backbone.stages.3.0.dwconv.weight, backbone.stages.3.0.dwconv.bias, backbone.stages.3.0.norm.weight, backbone.stages.3.0.norm.bias, backbone.stages.3.0.pwconv1.weight, backbone.stages.3.0.pwconv1.bias, backbone.stages.3.0.pwconv2.weight, backbone.stages.3.0.pwconv2.bias, backbone.stages.3.1.gamma, backbone.stages.3.1.dwconv.weight, backbone.stages.3.1.dwconv.bias, backbone.stages.3.1.norm.weight, backbone.stages.3.1.norm.bias, backbone.stages.3.1.pwconv1.weight, backbone.stages.3.1.pwconv1.bias, backbone.stages.3.1.pwconv2.weight, backbone.stages.3.1.pwconv2.bias, backbone.stages.3.2.gamma, backbone.stages.3.2.dwconv.weight, backbone.stages.3.2.dwconv.bias, backbone.stages.3.2.norm.weight, backbone.stages.3.2.norm.bias, backbone.stages.3.2.pwconv1.weight, backbone.stages.3.2.pwconv1.bias, backbone.stages.3.2.pwconv2.weight, backbone.stages.3.2.pwconv2.bias, backbone.norm0.weight, backbone.norm0.bias, backbone.norm1.weight, backbone.norm1.bias, backbone.norm2.weight, backbone.norm2.bias, backbone.norm3.weight, backbone.norm3.bias

2022-05-29 13:05:10,417 - mmdet - INFO - Start running, host: kuzuki@kuzuki-PC, work_dir: /home/kuzuki/Downloads/code/AdaMixer/work_dirs/convbackboom
2022-05-29 13:05:10,418 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-05-29 13:05:10,418 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2022-05-29 13:05:10,420 - mmdet - INFO - Checkpoints will be saved to /home/kuzuki/Downloads/code/AdaMixer/work_dirs/convbackboom by HardDiskBackend.
2022-05-29 13:07:10,618 - mmdet - INFO - Epoch [1][50/117266]	lr: 3.997e-04, eta: 39 days, 3:36:15, time: 2.404, data_time: 0.054, memory: 2479, loss_cls: 3.0108, loss_bbox: 0.7716, loss: 3.7823
2022-05-29 13:09:06,890 - mmdet - INFO - Epoch [1][100/117266]	lr: 7.995e-04, eta: 38 days, 12:14:35, time: 2.325, data_time: 0.008, memory: 2479, loss_cls: 8.7856, loss_bbox: 0.8530, loss: 9.6386
2022-05-29 13:11:05,683 - mmdet - INFO - Epoch [1][150/117266]	lr: 1.199e-03, eta: 38 days, 13:40:01, time: 2.376, data_time: 0.007, memory: 2546, loss_cls: 8.7661, loss_bbox: 0.8688, loss: 9.6349
2022-05-29 13:13:02,877 - mmdet - INFO - Epoch [1][200/117266]	lr: 1.599e-03, eta: 38 days, 11:14:25, time: 2.344, data_time: 0.007, memory: 2546, loss_cls: 5.8752, loss_bbox: 0.7601, loss: 6.6353
2022-05-29 13:14:58,321 - mmdet - INFO - Epoch [1][250/117266]	lr: 1.999e-03, eta: 38 days, 7:02:04, time: 2.309, data_time: 0.007, memory: 2546, loss_cls: 3.6116, loss_bbox: 0.7559, loss: 4.3675
2022-05-29 13:16:55,444 - mmdet - INFO - Epoch [1][300/117266]	lr: 2.398e-03, eta: 38 days, 6:24:30, time: 2.342, data_time: 0.008, memory: 2546, loss_cls: 1.3195, loss_bbox: 0.8219, loss: 2.1414
2022-05-29 13:18:54,476 - mmdet - INFO - Epoch [1][350/117266]	lr: 2.798e-03, eta: 38 days, 8:04:52, time: 2.381, data_time: 0.008, memory: 2546, loss_cls: 1.2081, loss_bbox: 0.7898, loss: 1.9979
2022-05-29 13:20:52,202 - mmdet - INFO - Epoch [1][400/117266]	lr: 3.198e-03, eta: 38 days, 8:03:13, time: 2.355, data_time: 0.008, memory: 2546, loss_cls: 1.0682, loss_bbox: 0.8082, loss: 1.8764
2022-05-29 13:22:48,542 - mmdet - INFO - Epoch [1][450/117266]	lr: 3.598e-03, eta: 38 days, 6:49:14, time: 2.327, data_time: 0.008, memory: 2546, loss_cls: 0.9901, loss_bbox: 0.7565, loss: 1.7466
2022-05-29 13:24:48,576 - mmdet - INFO - Epoch [1][500/117266]	lr: 3.997e-03, eta: 38 days, 8:42:53, time: 2.401, data_time: 0.008, memory: 2546, loss_cls: 1.0384, loss_bbox: 0.7584, loss: 1.7968
2022-05-29 13:26:46,916 - mmdet - INFO - Epoch [1][550/117266]	lr: 4.397e-03, eta: 38 days, 9:03:16, time: 2.367, data_time: 0.008, memory: 2546, loss_cls: 1.0167, loss_bbox: 0.7968, loss: 1.8136
2022-05-29 13:28:48,004 - mmdet - INFO - Epoch [1][600/117266]	lr: 4.797e-03, eta: 38 days, 11:07:18, time: 2.422, data_time: 0.009, memory: 2546, loss_cls: 1.0136, loss_bbox: 0.7987, loss: 1.8124
2022-05-29 13:30:46,233 - mmdet - INFO - Epoch [1][650/117266]	lr: 5.197e-03, eta: 38 days, 11:08:52, time: 2.365, data_time: 0.008, memory: 2546, loss_cls: 1.0654, loss_bbox: 0.6712, loss: 1.7366
2022-05-29 13:32:44,402 - mmdet - INFO - Epoch [1][700/117266]	lr: 5.596e-03, eta: 38 days, 11:07:53, time: 2.363, data_time: 0.008, memory: 2546, loss_cls: 1.0233, loss_bbox: 0.7878, loss: 1.8111
2022-05-29 13:34:43,092 - mmdet - INFO - Epoch [1][750/117266]	lr: 5.996e-03, eta: 38 days, 11:23:04, time: 2.374, data_time: 0.009, memory: 2546, loss_cls: 1.0302, loss_bbox: 0.7026, loss: 1.7328
2022-05-29 13:36:40,549 - mmdet - INFO - Epoch [1][800/117266]	lr: 6.396e-03, eta: 38 days, 10:59:59, time: 2.349, data_time: 0.008, memory: 2546, loss_cls: 1.0274, loss_bbox: 0.7039, loss: 1.7313
2022-05-29 13:38:39,185 - mmdet - INFO - Epoch [1][850/117266]	lr: 6.795e-03, eta: 38 days, 11:11:54, time: 2.373, data_time: 0.008, memory: 2546, loss_cls: 0.9788, loss_bbox: 0.7149, loss: 1.6937
2022-05-29 13:40:39,887 - mmdet - INFO - Epoch [1][900/117266]	lr: 7.195e-03, eta: 38 days, 12:16:03, time: 2.414, data_time: 0.008, memory: 2546, loss_cls: 1.0042, loss_bbox: 0.7669, loss: 1.7711
2022-05-29 13:42:37,740 - mmdet - INFO - Epoch [1][950/117266]	lr: 7.595e-03, eta: 38 days, 12:02:58, time: 2.357, data_time: 0.007, memory: 2546, loss_cls: 1.0048, loss_bbox: 0.7632, loss: 1.7680
2022-05-29 13:44:37,406 - mmdet - INFO - Exp name: convbackboom.py
2022-05-29 13:44:37,406 - mmdet - INFO - Epoch [1][1000/117266]	lr: 7.995e-03, eta: 38 days, 12:33:29, time: 2.393, data_time: 0.008, memory: 2546, loss_cls: 0.9895, loss_bbox: 0.7710, loss: 1.7606
2022-05-29 13:46:36,736 - mmdet - INFO - Epoch [1][1050/117266]	lr: 8.394e-03, eta: 38 days, 12:53:25, time: 2.387, data_time: 0.009, memory: 2546, loss_cls: 1.0095, loss_bbox: 0.7447, loss: 1.7542
2022-05-29 13:48:30,647 - mmdet - INFO - Epoch [1][1100/117266]	lr: 8.794e-03, eta: 38 days, 11:15:54, time: 2.278, data_time: 0.009, memory: 2546, loss_cls: 0.9686, loss_bbox: 0.7292, loss: 1.6978
2022-05-29 13:50:27,308 - mmdet - INFO - Epoch [1][1150/117266]	lr: 9.194e-03, eta: 38 days, 10:42:43, time: 2.333, data_time: 0.008, memory: 2546, loss_cls: 0.9975, loss_bbox: 0.7250, loss: 1.7225
2022-05-29 13:52:28,534 - mmdet - INFO - Epoch [1][1200/117266]	lr: 9.594e-03, eta: 38 days, 11:41:19, time: 2.425, data_time: 0.008, memory: 2546, loss_cls: 1.0295, loss_bbox: 0.7480, loss: 1.7775
2022-05-29 13:54:30,029 - mmdet - INFO - Epoch [1][1250/117266]	lr: 9.993e-03, eta: 38 days, 12:40:05, time: 2.430, data_time: 0.007, memory: 2546, loss_cls: 1.0379, loss_bbox: 0.7872, loss: 1.8251
2022-05-29 13:56:25,810 - mmdet - INFO - Epoch [1][1300/117266]	lr: 1.039e-02, eta: 38 days, 11:51:12, time: 2.316, data_time: 0.007, memory: 2546, loss_cls: 1.0437, loss_bbox: 0.8165, loss: 1.8603
2022-05-29 13:58:25,717 - mmdet - INFO - Epoch [1][1350/117266]	lr: 1.079e-02, eta: 38 days, 12:17:23, time: 2.398, data_time: 0.007, memory: 2546, loss_cls: 1.0085, loss_bbox: 0.7446, loss: 1.7531
2022-05-29 14:00:24,720 - mmdet - INFO - Epoch [1][1400/117266]	lr: 1.119e-02, eta: 38 days, 12:26:26, time: 2.380, data_time: 0.008, memory: 2546, loss_cls: 0.9808, loss_bbox: 0.7362, loss: 1.7170
2022-05-29 14:02:21,490 - mmdet - INFO - Epoch [1][1450/117266]	lr: 1.159e-02, eta: 38 days, 11:58:39, time: 2.335, data_time: 0.007, memory: 2546, loss_cls: 0.9814, loss_bbox: 0.7814, loss: 1.7629
2022-05-29 14:04:20,795 - mmdet - INFO - Epoch [1][1500/117266]	lr: 1.199e-02, eta: 38 days, 12:12:11, time: 2.386, data_time: 0.007, memory: 2546, loss_cls: 0.9570, loss_bbox: 0.7414, loss: 1.6984
2022-05-29 14:06:19,979 - mmdet - INFO - Epoch [1][1550/117266]	lr: 1.200e-02, eta: 38 days, 12:22:53, time: 2.384, data_time: 0.010, memory: 2546, loss_cls: 1.0192, loss_bbox: 0.7768, loss: 1.7960
