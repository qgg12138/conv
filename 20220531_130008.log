2022-05-31 13:00:09,048 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.9.7 | packaged by conda-forge | (default, Sep 14 2021, 01:17:55) [GCC 9.4.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.1, V10.1.243
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.8.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0
OpenCV: 4.5.5
MMCV: 1.3.17
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMDetection: 2.12.0+b8c2d6a
------------------------------------------------------------

2022-05-31 13:00:09,794 - mmdet - INFO - Distributed training: False
2022-05-31 13:00:10,416 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/home/kuzuki/Downloads/coco/'
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),
    dict(
        type='Normalize',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=1,
    train=dict(
        type='CocoDataset',
        ann_file=
        '/root/data/public/coco2017/annotations/instances_train2017.json',
        img_prefix='/root/data/public/coco2017/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file=
        '/root/data/public/coco2017/annotations/instances_val2017.json',
        img_prefix='/root/data/public/coco2017/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file=
        '/root/data/public/coco2017/annotations/instances_val2017.json',
        img_prefix='/root/data/public/coco2017/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(
    type='SGD',
    lr=0.12,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        norm_decay_mult=0.0, custom_keys=dict(backbone=dict(lr_mult=0.05))))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=0.00066667,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
model = dict(
    type='YOLOF',
    pretrained='convnext_tiny_1k_224_ema.pth',
    backbone=dict(
        init_cfg=dict(type='Pretrained', checkpoint='new.pth'),
        type='ConvNeXt',
        depths=[3, 3, 9, 3],
        dims=[96, 192, 384, 768]),
    neck=dict(
        type='DilatedEncoder',
        in_channels=768,
        out_channels=512,
        block_mid_channels=128,
        num_residual_blocks=4),
    bbox_head=dict(
        type='YOLOFHead',
        num_classes=80,
        in_channels=512,
        reg_decoded_bbox=True,
        anchor_generator=dict(
            type='AnchorGenerator',
            ratios=[1.0],
            scales=[1, 2, 4, 8, 16],
            strides=[32]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0],
            add_ctr_clamp=True,
            ctr_clamp=32),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='UniformAssigner', pos_ignore_thr=0.15, neg_ignore_thr=0.7),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.6),
        max_per_img=100))
custom_imports = dict(
    imports=['mmdet.models.backbones.convnext'], allow_failed_imports=False)
fp16 = dict(loss_scale='dynamic')
work_dir = './work_dirs/convbackboom'
gpu_ids = range(0, 1)

2022-05-31 13:01:22,764 - mmdet - INFO - initialize ConvNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'new.pth'}
Name of parameter - Initialization information

backbone.downsample_layers.0.0.weight - torch.Size([96, 3, 4, 4]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.0.0.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.0.1.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.0.1.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.0.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.0.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.1.weight - torch.Size([192, 96, 2, 2]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.1.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.0.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.0.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.1.weight - torch.Size([384, 192, 2, 2]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.0.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.0.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.1.weight - torch.Size([768, 384, 2, 2]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.gamma - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.dwconv.weight - torch.Size([96, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.dwconv.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.norm.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.norm.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv1.weight - torch.Size([384, 96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv2.weight - torch.Size([96, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv2.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.gamma - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.dwconv.weight - torch.Size([96, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.dwconv.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.norm.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.norm.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv1.weight - torch.Size([384, 96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv2.weight - torch.Size([96, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv2.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.gamma - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.dwconv.weight - torch.Size([96, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.dwconv.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.norm.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.norm.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv1.weight - torch.Size([384, 96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv2.weight - torch.Size([96, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv2.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.gamma - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.dwconv.weight - torch.Size([192, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.dwconv.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.norm.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.norm.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv1.weight - torch.Size([768, 192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv2.weight - torch.Size([192, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv2.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.gamma - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.dwconv.weight - torch.Size([192, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.dwconv.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.norm.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.norm.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv1.weight - torch.Size([768, 192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv2.weight - torch.Size([192, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv2.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.gamma - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.dwconv.weight - torch.Size([192, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.dwconv.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.norm.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.norm.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv1.weight - torch.Size([768, 192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv2.weight - torch.Size([192, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv2.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.gamma - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.dwconv.weight - torch.Size([768, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.dwconv.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv1.weight - torch.Size([3072, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv1.bias - torch.Size([3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv2.weight - torch.Size([768, 3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv2.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.gamma - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.dwconv.weight - torch.Size([768, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.dwconv.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv1.weight - torch.Size([3072, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv1.bias - torch.Size([3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv2.weight - torch.Size([768, 3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv2.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.gamma - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.dwconv.weight - torch.Size([768, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.dwconv.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv1.weight - torch.Size([3072, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv1.bias - torch.Size([3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv2.weight - torch.Size([768, 3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv2.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.norm0.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm3.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm3.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.lateral_conv.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.lateral_conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.lateral_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.lateral_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.fpn_conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.fpn_conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.fpn_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.fpn_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.0.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_subnet.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.1.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_subnet.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.0.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.1.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.3.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_score.weight - torch.Size([400, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_score.bias - torch.Size([400]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_pred.weight - torch.Size([20, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_pred.bias - torch.Size([20]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.object_pred.weight - torch.Size([5, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.object_pred.bias - torch.Size([5]): 
Initialized by user-defined `init_weights` in YOLOFHead  
2022-05-31 13:02:07,508 - mmdet - INFO - Start running, host: root@dl-2333046116-pod-jupyter-54c57d9b66-jq4mj, work_dir: /root/AdaMixer/work_dirs/convbackboom
2022-05-31 13:02:07,509 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-05-31 13:02:07,509 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2022-05-31 13:02:07,510 - mmdet - INFO - Checkpoints will be saved to /root/AdaMixer/work_dirs/convbackboom by HardDiskBackend.
