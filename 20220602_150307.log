2022-06-02 15:03:07,535 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.9.7 | packaged by conda-forge | (default, Sep 14 2021, 01:17:55) [GCC 9.4.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.1, V10.1.243
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.8.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0
OpenCV: 4.5.5
MMCV: 1.3.17
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMDetection: 2.12.0+b8c2d6a
------------------------------------------------------------

2022-06-02 15:03:08,222 - mmdet - INFO - Distributed training: False
2022-06-02 15:03:08,835 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/home/kuzuki/Downloads/coco/'
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),
    dict(
        type='Normalize',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=1,
    train=dict(
        type='CocoDataset',
        ann_file=
        '/root/data/public/coco2017/annotations/instances_train2017.json',
        img_prefix='/root/data/public/coco2017/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='RandomShift', shift_ratio=0.5, max_shift_px=32),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file=
        '/root/data/public/coco2017/annotations/instances_val2017.json',
        img_prefix='/root/data/public/coco2017/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file=
        '/root/data/public/coco2017/annotations/instances_val2017.json',
        img_prefix='/root/data/public/coco2017/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(
    type='SGD',
    lr=0.012,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        norm_decay_mult=0.0, custom_keys=dict(backbone=dict(lr_mult=0.5))))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.00066667,
    min_lr=0.0001)
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'epoch_1_cos_sgd0012.pth'
resume_from = None
workflow = [('train', 1)]
model = dict(
    type='YOLOF',
    pretrained='convnext_tiny_1k_224_ema.pth',
    backbone=dict(
        init_cfg=dict(type='Pretrained', checkpoint='new.pth'),
        type='ConvNeXt',
        depths=[3, 3, 9, 3],
        dims=[96, 192, 384, 768]),
    neck=dict(
        type='DilatedEncoder',
        in_channels=768,
        out_channels=512,
        block_mid_channels=128,
        num_residual_blocks=4),
    bbox_head=dict(
        type='YOLOFHead',
        num_classes=80,
        in_channels=512,
        reg_decoded_bbox=True,
        anchor_generator=dict(
            type='AnchorGenerator',
            ratios=[1.0],
            scales=[1, 2, 4, 8, 16],
            strides=[32]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0],
            add_ctr_clamp=True,
            ctr_clamp=32),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='UniformAssigner', pos_ignore_thr=0.15, neg_ignore_thr=0.7),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.6),
        max_per_img=100))
custom_imports = dict(
    imports=['mmdet.models.backbones.convnext'], allow_failed_imports=False)
fp16 = dict(loss_scale=512.0)
work_dir = './work_dirs/convbackboom'
gpu_ids = range(0, 1)

2022-06-02 15:04:16,219 - mmdet - INFO - initialize ConvNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'new.pth'}
Name of parameter - Initialization information

backbone.downsample_layers.0.0.weight - torch.Size([96, 3, 4, 4]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.0.0.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.0.1.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.0.1.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.0.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.0.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.1.weight - torch.Size([192, 96, 2, 2]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.1.1.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.0.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.0.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.1.weight - torch.Size([384, 192, 2, 2]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.2.1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.0.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.0.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.1.weight - torch.Size([768, 384, 2, 2]): 
PretrainedInit: load from new.pth 

backbone.downsample_layers.3.1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.gamma - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.dwconv.weight - torch.Size([96, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.dwconv.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.norm.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.norm.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv1.weight - torch.Size([384, 96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv2.weight - torch.Size([96, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.0.pwconv2.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.gamma - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.dwconv.weight - torch.Size([96, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.dwconv.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.norm.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.norm.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv1.weight - torch.Size([384, 96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv2.weight - torch.Size([96, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.1.pwconv2.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.gamma - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.dwconv.weight - torch.Size([96, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.dwconv.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.norm.weight - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.norm.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv1.weight - torch.Size([384, 96]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv1.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv2.weight - torch.Size([96, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.0.2.pwconv2.bias - torch.Size([96]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.gamma - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.dwconv.weight - torch.Size([192, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.dwconv.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.norm.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.norm.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv1.weight - torch.Size([768, 192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv2.weight - torch.Size([192, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.0.pwconv2.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.gamma - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.dwconv.weight - torch.Size([192, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.dwconv.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.norm.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.norm.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv1.weight - torch.Size([768, 192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv2.weight - torch.Size([192, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.1.pwconv2.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.gamma - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.dwconv.weight - torch.Size([192, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.dwconv.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.norm.weight - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.norm.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv1.weight - torch.Size([768, 192]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv1.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv2.weight - torch.Size([192, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.1.2.pwconv2.bias - torch.Size([192]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.0.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.1.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.2.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.3.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.4.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.5.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.6.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.7.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.gamma - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.dwconv.weight - torch.Size([384, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.dwconv.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.norm.weight - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.norm.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv1.weight - torch.Size([1536, 384]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv1.bias - torch.Size([1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv2.weight - torch.Size([384, 1536]): 
PretrainedInit: load from new.pth 

backbone.stages.2.8.pwconv2.bias - torch.Size([384]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.gamma - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.dwconv.weight - torch.Size([768, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.dwconv.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv1.weight - torch.Size([3072, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv1.bias - torch.Size([3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv2.weight - torch.Size([768, 3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.0.pwconv2.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.gamma - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.dwconv.weight - torch.Size([768, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.dwconv.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv1.weight - torch.Size([3072, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv1.bias - torch.Size([3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv2.weight - torch.Size([768, 3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.1.pwconv2.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.gamma - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.dwconv.weight - torch.Size([768, 1, 7, 7]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.dwconv.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.norm.weight - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.norm.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv1.weight - torch.Size([3072, 768]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv1.bias - torch.Size([3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv2.weight - torch.Size([768, 3072]): 
PretrainedInit: load from new.pth 

backbone.stages.3.2.pwconv2.bias - torch.Size([768]): 
PretrainedInit: load from new.pth 

backbone.norm0.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm3.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

backbone.norm3.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.lateral_conv.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.lateral_conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.lateral_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.lateral_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.fpn_conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.fpn_conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.fpn_norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.fpn_norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.0.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.0.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.1.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.1.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.2.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.2.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DilatedEncoder  

neck.dilated_encoder_blocks.3.conv3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

neck.dilated_encoder_blocks.3.conv3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.0.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_subnet.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.1.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_subnet.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_subnet.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.0.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.1.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.3.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_subnet.3.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.bbox_subnet.3.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOF  

bbox_head.cls_score.weight - torch.Size([400, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.cls_score.bias - torch.Size([400]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_pred.weight - torch.Size([20, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.bbox_pred.bias - torch.Size([20]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.object_pred.weight - torch.Size([5, 512, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOFHead  

bbox_head.object_pred.bias - torch.Size([5]): 
Initialized by user-defined `init_weights` in YOLOFHead  
2022-06-02 15:04:43,463 - mmdet - INFO - load checkpoint from local path: epoch_1_cos_sgd0012.pth
2022-06-02 15:04:51,814 - mmdet - INFO - Start running, host: root@dl-2333046116-pod-jupyter-74c46b4b98-t6pdp, work_dir: /root/AdaMixer/work_dirs/convbackboom
2022-06-02 15:04:51,814 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) EvalHook                           
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-06-02 15:04:51,815 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2022-06-02 15:04:51,816 - mmdet - INFO - Checkpoints will be saved to /root/AdaMixer/work_dirs/convbackboom by HardDiskBackend.
2022-06-02 15:05:55,692 - mmdet - INFO - Epoch [1][50/14659]	lr: 5.916e-04, eta: 2 days, 14:23:13, time: 1.277, data_time: 0.087, memory: 15934, loss_cls: 0.2859, loss_bbox: 0.3721, loss: 0.6580
2022-06-02 15:06:57,267 - mmdet - INFO - Epoch [1][100/14659]	lr: 1.191e-03, eta: 2 days, 13:15:20, time: 1.232, data_time: 0.025, memory: 15934, loss_cls: 0.2878, loss_bbox: 0.3607, loss: 0.6485
2022-06-02 15:07:58,928 - mmdet - INFO - Epoch [1][150/14659]	lr: 1.791e-03, eta: 2 days, 12:53:40, time: 1.233, data_time: 0.024, memory: 15934, loss_cls: 0.2834, loss_bbox: 0.3540, loss: 0.6374
2022-06-02 15:08:58,913 - mmdet - INFO - Epoch [1][200/14659]	lr: 2.390e-03, eta: 2 days, 12:17:46, time: 1.200, data_time: 0.026, memory: 15934, loss_cls: 0.2825, loss_bbox: 0.3658, loss: 0.6483
2022-06-02 15:09:58,460 - mmdet - INFO - Epoch [1][250/14659]	lr: 2.990e-03, eta: 2 days, 11:50:43, time: 1.191, data_time: 0.026, memory: 15934, loss_cls: 0.2710, loss_bbox: 0.3518, loss: 0.6228
2022-06-02 15:11:00,336 - mmdet - INFO - Epoch [1][300/14659]	lr: 3.590e-03, eta: 2 days, 11:55:04, time: 1.237, data_time: 0.025, memory: 15934, loss_cls: 0.2997, loss_bbox: 0.3581, loss: 0.6578
2022-06-02 15:12:01,133 - mmdet - INFO - Epoch [1][350/14659]	lr: 4.189e-03, eta: 2 days, 11:48:52, time: 1.216, data_time: 0.027, memory: 15934, loss_cls: 0.2838, loss_bbox: 0.3305, loss: 0.6143
2022-06-02 15:13:04,063 - mmdet - INFO - Epoch [1][400/14659]	lr: 4.789e-03, eta: 2 days, 11:59:33, time: 1.259, data_time: 0.024, memory: 15934, loss_cls: 0.2976, loss_bbox: 0.3777, loss: 0.6753
2022-06-02 15:14:02,131 - mmdet - INFO - Epoch [1][450/14659]	lr: 5.388e-03, eta: 2 days, 11:36:02, time: 1.161, data_time: 0.023, memory: 15934, loss_cls: 0.3166, loss_bbox: 0.3839, loss: 0.7005
2022-06-02 15:14:59,624 - mmdet - INFO - Epoch [1][500/14659]	lr: 5.988e-03, eta: 2 days, 11:13:40, time: 1.150, data_time: 0.031, memory: 15934, loss_cls: 0.3130, loss_bbox: 0.3609, loss: 0.6739
2022-06-02 15:16:00,212 - mmdet - INFO - Epoch [1][550/14659]	lr: 6.000e-03, eta: 2 days, 11:11:39, time: 1.212, data_time: 0.024, memory: 15934, loss_cls: 0.3146, loss_bbox: 0.3684, loss: 0.6830
2022-06-02 15:17:02,020 - mmdet - INFO - Epoch [1][600/14659]	lr: 6.000e-03, eta: 2 days, 11:15:44, time: 1.236, data_time: 0.025, memory: 15934, loss_cls: 0.3169, loss_bbox: 0.3750, loss: 0.6919
2022-06-02 15:18:03,981 - mmdet - INFO - Epoch [1][650/14659]	lr: 6.000e-03, eta: 2 days, 11:19:43, time: 1.239, data_time: 0.026, memory: 15934, loss_cls: 0.3106, loss_bbox: 0.3690, loss: 0.6796
2022-06-02 15:19:06,183 - mmdet - INFO - Epoch [1][700/14659]	lr: 6.000e-03, eta: 2 days, 11:23:59, time: 1.244, data_time: 0.023, memory: 15934, loss_cls: 0.3096, loss_bbox: 0.3537, loss: 0.6633
2022-06-02 15:20:08,623 - mmdet - INFO - Epoch [1][750/14659]	lr: 6.000e-03, eta: 2 days, 11:28:28, time: 1.249, data_time: 0.025, memory: 15934, loss_cls: 0.2907, loss_bbox: 0.3570, loss: 0.6478
2022-06-02 15:21:10,864 - mmdet - INFO - Epoch [1][800/14659]	lr: 6.000e-03, eta: 2 days, 11:31:33, time: 1.245, data_time: 0.026, memory: 15934, loss_cls: 0.3022, loss_bbox: 0.3759, loss: 0.6781
2022-06-02 15:22:12,036 - mmdet - INFO - Epoch [1][850/14659]	lr: 6.000e-03, eta: 2 days, 11:30:28, time: 1.223, data_time: 0.025, memory: 15934, loss_cls: 0.2963, loss_bbox: 0.3609, loss: 0.6572
2022-06-02 15:23:13,785 - mmdet - INFO - Epoch [1][900/14659]	lr: 6.000e-03, eta: 2 days, 11:31:16, time: 1.235, data_time: 0.025, memory: 15934, loss_cls: 0.3158, loss_bbox: 0.3823, loss: 0.6981
2022-06-02 15:24:17,142 - mmdet - INFO - Epoch [1][950/14659]	lr: 6.000e-03, eta: 2 days, 11:36:48, time: 1.267, data_time: 0.026, memory: 15934, loss_cls: 0.3115, loss_bbox: 0.3861, loss: 0.6976
2022-06-02 15:25:17,856 - mmdet - INFO - Exp name: convbackboom.py
2022-06-02 15:25:17,857 - mmdet - INFO - Epoch [1][1000/14659]	lr: 6.000e-03, eta: 2 days, 11:33:59, time: 1.214, data_time: 0.028, memory: 15934, loss_cls: 0.3027, loss_bbox: 0.3791, loss: 0.6818
2022-06-02 15:26:21,411 - mmdet - INFO - Epoch [1][1050/14659]	lr: 6.000e-03, eta: 2 days, 11:39:13, time: 1.271, data_time: 0.042, memory: 15934, loss_cls: 0.3221, loss_bbox: 0.3810, loss: 0.7031
2022-06-02 15:27:23,657 - mmdet - INFO - Epoch [1][1100/14659]	lr: 6.000e-03, eta: 2 days, 11:40:25, time: 1.245, data_time: 0.026, memory: 15934, loss_cls: 0.2962, loss_bbox: 0.3763, loss: 0.6725
2022-06-02 15:28:24,919 - mmdet - INFO - Epoch [1][1150/14659]	lr: 6.000e-03, eta: 2 days, 11:38:55, time: 1.225, data_time: 0.026, memory: 15934, loss_cls: 0.3004, loss_bbox: 0.3781, loss: 0.6785
2022-06-02 15:29:27,424 - mmdet - INFO - Epoch [1][1200/14659]	lr: 6.000e-03, eta: 2 days, 11:40:29, time: 1.250, data_time: 0.026, memory: 15934, loss_cls: 0.3101, loss_bbox: 0.3630, loss: 0.6731
2022-06-02 15:30:27,655 - mmdet - INFO - Epoch [1][1250/14659]	lr: 6.000e-03, eta: 2 days, 11:36:33, time: 1.205, data_time: 0.024, memory: 15934, loss_cls: 0.3096, loss_bbox: 0.4049, loss: 0.7145
2022-06-02 15:31:30,669 - mmdet - INFO - Epoch [1][1300/14659]	lr: 6.000e-03, eta: 2 days, 11:39:04, time: 1.260, data_time: 0.026, memory: 15934, loss_cls: 0.3007, loss_bbox: 0.3768, loss: 0.6775
2022-06-02 15:32:32,338 - mmdet - INFO - Epoch [1][1350/14659]	lr: 6.000e-03, eta: 2 days, 11:38:25, time: 1.233, data_time: 0.026, memory: 15934, loss_cls: 0.3073, loss_bbox: 0.3865, loss: 0.6937
2022-06-02 15:33:34,534 - mmdet - INFO - Epoch [1][1400/14659]	lr: 6.000e-03, eta: 2 days, 11:38:50, time: 1.244, data_time: 0.026, memory: 15934, loss_cls: 0.3008, loss_bbox: 0.3822, loss: 0.6830
2022-06-02 15:34:35,825 - mmdet - INFO - Epoch [1][1450/14659]	lr: 6.000e-03, eta: 2 days, 11:37:20, time: 1.226, data_time: 0.026, memory: 15934, loss_cls: 0.3205, loss_bbox: 0.3592, loss: 0.6797
